From 9276089579a8d9fa89f84c0c25ad1a539bc9887d Mon Sep 17 00:00:00 2001
From: Alexander Afanasyev <aa@cs.fiu.edu>
Date: Fri, 5 Jul 2019 22:06:04 -0400
Subject: [PATCH 2/3] util: Make use of attributes in logging facilities

Change-Id: Ib7e495629107d9ebe2105a7fe1f99d89ad92e244
---
 ndn-cxx/util/logger.cpp  |  2 ++
 ndn-cxx/util/logger.hpp  | 23 ++++++++++++++++++-----
 ndn-cxx/util/logging.cpp | 13 ++++++++++++-
 3 files changed, 32 insertions(+), 6 deletions(-)

diff --git a/ndn-cxx/util/logger.cpp b/ndn-cxx/util/logger.cpp
index 5f6c2de0..68c09a98 100644
--- a/ndn-cxx/util/logger.cpp
+++ b/ndn-cxx/util/logger.cpp
@@ -108,6 +108,8 @@ Logger::Logger(const char* name)
   }
   this->setLevel(LogLevel::NONE);
   Logging::get().addLoggerImpl(*this);
+
+  this->add_attribute(log::module.get_name(), boost::log::attributes::constant<std::string>(m_moduleName));
 }
 
 void
diff --git a/ndn-cxx/util/logger.hpp b/ndn-cxx/util/logger.hpp
index f785c7ba..aeb348ef 100644
--- a/ndn-cxx/util/logger.hpp
+++ b/ndn-cxx/util/logger.hpp
@@ -29,7 +29,11 @@
 #else
 
 #include <boost/log/common.hpp>
+#include <boost/log/attributes/clock.hpp>
+#include <boost/log/expressions/keyword.hpp>
 #include <boost/log/sources/logger.hpp>
+#include <boost/log/sources/severity_logger.hpp>
+
 #include <atomic>
 
 namespace ndn {
@@ -48,6 +52,14 @@ enum class LogLevel {
   ALL     = 255   ///< all messages
 };
 
+namespace log {
+
+BOOST_LOG_ATTRIBUTE_KEYWORD(module, "Module", std::string);
+BOOST_LOG_ATTRIBUTE_KEYWORD(timestamp, "TimeStamp", boost::log::attributes::local_clock::value_type);
+BOOST_LOG_ATTRIBUTE_KEYWORD(severity, "Severity", LogLevel);
+
+} // namespace log
+
 /** \brief Output LogLevel as a string.
  *  \throw std::invalid_argument unknown \p level
  */
@@ -65,7 +77,7 @@ parseLogLevel(const std::string& s);
  *  \note Normally, loggers should be defined using #NDN_LOG_INIT, #NDN_LOG_MEMBER_INIT,
  *        or #NDN_LOG_MEMBER_INIT_SPECIALIZED.
  */
-class Logger : public boost::log::sources::logger_mt
+class Logger : public boost::log::sources::severity_logger_mt<LogLevel>
 {
 public:
   explicit
@@ -235,20 +247,21 @@ using ArgumentType = typename ExtractArgument<T>::type;
 /** \cond */
 #if BOOST_VERSION == 105900
 // workaround Boost bug 11549
-#define NDN_BOOST_LOG(x) BOOST_LOG(x) << ""
+#define NDN_BOOST_LOG(x, sev) BOOST_LOG_SEV(x, sev) << ""
 #else
-#define NDN_BOOST_LOG(x) BOOST_LOG(x)
+#define NDN_BOOST_LOG(x, sev) BOOST_LOG_SEV(x, sev)
 #endif
 
 // implementation detail
 #define NDN_LOG_INTERNAL(lvl, lvlstr, expression) \
   do { \
     if (ndn_cxx_getLogger().isLevelEnabled(::ndn::util::LogLevel::lvl)) { \
-      NDN_BOOST_LOG(ndn_cxx_getLogger()) << ::ndn::util::detail::LoggerTimestamp{} \
-        << " " BOOST_STRINGIZE(lvlstr) ": [" << ndn_cxx_getLogger().getModuleName() << "] " \
+      NDN_BOOST_LOG(ndn_cxx_getLogger(), ::ndn::util::LogLevel::lvl)  \
         << expression; \
     } \
   } while (false)
+
+
 /** \endcond */
 
 /** \brief Log at TRACE level.
diff --git a/ndn-cxx/util/logging.cpp b/ndn-cxx/util/logging.cpp
index 5f19548f..e853e18f 100644
--- a/ndn-cxx/util/logging.cpp
+++ b/ndn-cxx/util/logging.cpp
@@ -23,6 +23,10 @@
 #include "ndn-cxx/util/logger.hpp"
 
 #include <boost/log/expressions.hpp>
+#include <boost/log/expressions/attr.hpp>
+#include <boost/log/expressions/formatters/date_time.hpp>
+#include <boost/log/support/date_time.hpp>
+#include <boost/log/utility/setup/common_attributes.hpp>
 #include <boost/range/adaptor/map.hpp>
 #include <boost/range/algorithm/copy.hpp>
 #include <boost/range/iterator_range.hpp>
@@ -58,6 +62,9 @@ Logging::Logging()
   if (environ != nullptr) {
     this->setLevelImpl(environ);
   }
+
+  // Register common attributes: "LineID", "TimeStamp", "ProcessID", "ThreadID"
+  boost::log::add_common_attributes();
 }
 
 void
@@ -223,7 +230,11 @@ Logging::setDestinationImpl(shared_ptr<std::ostream> os)
   }
 
   m_sink = boost::make_shared<Sink>(backend);
-  m_sink->set_formatter(boost::log::expressions::stream << boost::log::expressions::message);
+  m_sink->set_formatter(boost::log::expressions::stream
+                        << boost::log::expressions::format_date_time<boost::posix_time::ptime>(log::timestamp.get_name(), "%Y-%m-%dT%H:%M:%S.%f")
+                        << " " << boost::log::expressions::attr<LogLevel>(log::severity.get_name()) << ": "
+                        << "[" << boost::log::expressions::attr<std::string>(log::module.get_name()) << "] "
+                        << boost::log::expressions::message);
   boost::log::core::get()->add_sink(m_sink);
 }
 
-- 
2.22.0

