From 6d23397b440ac191236ab2d8d6afbb989a39869a Mon Sep 17 00:00:00 2001
From: Alexander Afanasyev <aa@cs.fiu.edu>
Date: Thu, 28 May 2020 16:50:38 -0400
Subject: [PATCH] The patch is shamelessly borrowed from
 https://github.com/moritz-wundke/Boost-for-Android/

---
 boost/asio/detail/config.hpp       |  6 +++++-
 boost/config/user.hpp              |  6 ++++++
 boost/system/error_code.hpp        |  1 +
 libs/filesystem/src/operations.cpp | 15 +++++++++++++++
 libs/filesystem/src/path.cpp       |  6 ++++--
 tools/build/src/tools/common.jam   |  8 ++++----
 6 files changed, 35 insertions(+), 7 deletions(-)

diff --git a/boost/asio/detail/config.hpp b/boost/asio/detail/config.hpp
index d48528a47..0ad2352f7 100644
--- a/boost/asio/detail/config.hpp
+++ b/boost/asio/detail/config.hpp
@@ -865,7 +865,11 @@
 #    if (_LIBCPP_VERSION < 7000)
 #     if (__cplusplus >= 201402)
 #      if __has_include(<experimental/string_view>)
-#       define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#       if __clang_major__ >= 7
+#        undef BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW
+#       else
+#        define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#       endif // __clang_major__ >= 7
 #      endif // __has_include(<experimental/string_view>)
 #     endif // (__cplusplus >= 201402)
 #    endif // (_LIBCPP_VERSION < 7000)
diff --git a/boost/config/user.hpp b/boost/config/user.hpp
index 8160fcae2..0e08efcb7 100644
--- a/boost/config/user.hpp
+++ b/boost/config/user.hpp
@@ -13,6 +13,12 @@
 //  configuration policy:
 //
 
+// Android defines
+// There is problem with std::atomic on android (and some other platforms).
+// See this link for more info:
+// https://code.google.com/p/android/issues/detail?id=42735#makechanges
+#define BOOST_ASIO_DISABLE_STD_ATOMIC 1
+
 // define this to locate a compiler config file:
 // #define BOOST_COMPILER_CONFIG <myheader>
 
diff --git a/boost/system/error_code.hpp b/boost/system/error_code.hpp
index df80592ea..0a007c33f 100644
--- a/boost/system/error_code.hpp
+++ b/boost/system/error_code.hpp
@@ -14,6 +14,7 @@
 #include <boost/system/detail/config.hpp>
 #include <boost/cstdint.hpp>
 #include <boost/config.hpp>
+#include <stdio.h>
 #include <ostream>
 #include <string>
 #include <functional>
diff --git a/libs/filesystem/src/operations.cpp b/libs/filesystem/src/operations.cpp
index 306875c5f..8f2e08ce3 100644
--- a/libs/filesystem/src/operations.cpp
+++ b/libs/filesystem/src/operations.cpp
@@ -221,6 +221,21 @@ typedef struct _REPARSE_DATA_BUFFER {
 
 # if defined(BOOST_POSIX_API)
 
+#  if defined(__ANDROID__)
+#  define truncate libboost_truncate_wrapper
+// truncate() is present in Android libc only starting from ABI 21, so here's a simple wrapper
+static int libboost_truncate_wrapper(const char *path, off_t length)
+{
+  int fd = open(path, O_WRONLY);
+  if (fd == -1) {
+    return -1;
+  }
+  int status = ftruncate(fd, length);
+  close(fd);
+  return status;
+}
+#  endif
+
 #   define BOOST_SET_CURRENT_DIRECTORY(P)(::chdir(P)== 0)
 #   define BOOST_CREATE_DIRECTORY(P)(::mkdir(P, S_IRWXU|S_IRWXG|S_IRWXO)== 0)
 #   define BOOST_CREATE_HARD_LINK(F,T)(::link(T, F)== 0)
diff --git a/libs/filesystem/src/path.cpp b/libs/filesystem/src/path.cpp
index 590f02960..770aa6b5a 100644
--- a/libs/filesystem/src/path.cpp
+++ b/libs/filesystem/src/path.cpp
@@ -41,7 +41,8 @@
 # include "windows_file_codecvt.hpp"
 # include <windows.h>
 #elif defined(macintosh) || defined(__APPLE__) || defined(__APPLE_CC__) \
- || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__)
+ || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__) \
+ || defined(__ANDROID__)
 # include <boost/filesystem/detail/utf8_codecvt_facet.hpp>
 #endif
 
@@ -874,7 +875,8 @@ namespace
     std::locale global_loc = std::locale();
     return std::locale(global_loc, new windows_file_codecvt);
 # elif defined(macintosh) || defined(__APPLE__) || defined(__APPLE_CC__) \
-  || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__)
+  || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__) \
+  || defined(__ANDROID__)
     // "All BSD system functions expect their string parameters to be in UTF-8 encoding
     // and nothing else." See
     // http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPInternational/Articles/FileEncodings.html
diff --git a/tools/build/src/tools/common.jam b/tools/build/src/tools/common.jam
index 005ac9c5d..340cfdbb5 100644
--- a/tools/build/src/tools/common.jam
+++ b/tools/build/src/tools/common.jam
@@ -980,10 +980,10 @@ local rule toolset-tag ( name : type ? : property-set )
     }
 
     # Ditto, from Clang 4
-    if ( $(tag) = clang || $(tag) = clangw ) && $(version[1]) && [ numbers.less 3 $(version[1]) ]
-    {
-        version = $(version[1]) ;
-    }
+    #if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ]
+    #{
+    #    version = $(version[1]) ;
+    #}
 
     # On intel, version is not added, because it does not matter and it is the
     # version of vc used as backend that matters. Ideally, we should encode the
-- 
2.26.2

